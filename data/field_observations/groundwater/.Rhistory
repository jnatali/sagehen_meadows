%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
%m/%d/%y %H:%M%m/%d/%y %H:%M ------## ------##
well_top_to_water <- biweekly_raw
well_top_to_water$day <- as.Date(well_top_to_water$timestamp,format="%m/%d/%Y")
well_top_to_water$time <- chron(well_top_to_water$timestamp)
install.packages("chron")
well_top_to_water$day <- as.Date(well_top_to_water$timestamp,format="%m/%d/%Y")
well_top_to_water$time <- chron(well_top_to_water$timestamp)
library(chron)
well_top_to_water$day <- as.Date(well_top_to_water$timestamp,format="%m/%d/%Y")
well_top_to_water$time <- chron(well_top_to_water$timestamp)
well_top_to_water$timestamp
source('~/Documents/GitHub/sagehen_meadows/Riverlab/Biweekly_groundwater.R')
well_top_to_water <- biweekly_raw
#well_top_to_water$day <- as.Date(well_top_to_water$timestamp,format="%m/%d/%y %H:%M")
well_top_to_water$day_only <- as.Date(well_top_to_water$timestamp,format="%m/%d/%Y")
#well_top_to_water$time <- chron(well_top_to_water$timestamp)
well_top_to_water <- well_top_to_water %>%
group_by(well_id, day_only, meter_id) %>% #keep the meter id. Assumes same meter per site per day
summarise_at(vars(welltop_to_water, water_binary), mean, na.rm = TRUE)
well_top_to_water <- biweekly_raw
View(well_top_to_ground)
View(well_top_to_ground)
View(well_top_to_water)
source('~/Documents/GitHub/sagehen_meadows/Riverlab/Biweekly_groundwater.R')
well_top_to_water <- well_top_to_water %>%
group_by(well_id, day_only, meter_id) %>% #keep the meter id. Assumes same meter per site per day
summarise_at(vars(welltop_to_water, water_binary, timestamp), mean, na.rm = TRUE)
well_top_to_water <- biweekly_raw
#well_top_to_water$day <- as.Date(well_top_to_water$timestamp,format="%m/%d/%y %H:%M")
well_top_to_water$day_only <- as.Date(well_top_to_water$timestamp,format="%m/%d/%Y")
well_top_to_water <- well_top_to_water %>%
group_by(well_id, day_only, meter_id) %>% #keep the meter id. Assumes same meter per site per day
summarise_at(vars(welltop_to_water, water_binary, timestamp), mean, na.rm = TRUE)
source('~/Documents/GitHub/sagehen_meadows/Riverlab/Biweekly_groundwater.R')
well_top_to_water <- biweekly_raw
#well_top_to_water$day <- as.Date(well_top_to_water$timestamp,format="%m/%d/%y %H:%M")
well_top_to_water$day_only <- as.Date(well_top_to_water$timestamp,format="%m/%d/%Y")
#well_top_to_water$time <- chron(well_top_to_water$timestamp)
well_top_to_water <- well_top_to_water %>%
group_by(well_id, day_only, timestamp, meter_id) %>% #keep the meter id. Assumes same meter per site per day
summarise_at(vars(welltop_to_water, water_binary), mean, na.rm = TRUE)
View(well_top_to_water)
well_top_to_water <- biweekly_raw
#well_top_to_water$day <- as.Date(well_top_to_water$timestamp,format="%m/%d/%y %H:%M")
well_top_to_water$day_only <- as.Date(well_top_to_water$timestamp)
#well_top_to_water$time <- chron(well_top_to_water$timestamp)
well_top_to_water <- well_top_to_water %>%
group_by(well_id, day_only, timestamp, meter_id) %>% #keep the meter id. Assumes same meter per site per day
summarise_at(vars(welltop_to_water, water_binary), mean, na.rm = TRUE)
well_top_to_water <- biweekly_raw
#well_top_to_water$day <- as.Date(well_top_to_water$timestamp,format="%m/%d/%y %H:%M")
well_top_to_water$day_only <- as.Date(well_top_to_water$timestamp)
well_top_to_water <- well_top_to_water %>%
group_by(well_id, day_only, timestamp, meter_id) %>% #keep the meter id. Assumes same meter per site per day
summarise_at(vars(welltop_to_water, water_binary), mean, na.rm = TRUE)
well_top_to_water$day_only <- as.Date(well_top_to_water$timestamp)
well_top_to_water <- biweekly_raw
source('~/Documents/GitHub/sagehen_meadows/Riverlab/Biweekly_groundwater.R')
source('~/Documents/GitHub/sagehen_meadows/Riverlab/Biweekly_groundwater.R')
source('~/Documents/GitHub/sagehen_meadows/scripts/groundwater/time_series/Biweekly_groundwater.R')
source('~/Documents/GitHub/sagehen_meadows/scripts/groundwater/time_series/Biweekly_groundwater.R')
source('~/Documents/GitHub/sagehen_meadows/scripts/groundwater/time_series/Biweekly_groundwater.R')
source('~/Documents/GitHub/sagehen_meadows/scripts/groundwater/time_series/Biweekly_groundwater.R')
#RIVERLAB: Creating Groundwater_BiWeekly.csv
#Author: Julia Nicholson
library(tidyverse) # a universe of tidy data packages
library(patchwork)
library(hash)
setwd("/Users/jnat/Documents/Github/sagehen_meadows/data/field_observations/groundwater/")
biweekly_raw <- read.csv(file = "bi-weekly manual/groundwater_biweekly_RAW.csv")
well_tops_to_ground <- read.csv(file = "well_dimensions.csv")
meter_offsets <- read.csv(file = "well_meter_offsets.csv")
#change meter_id header
#meter_offsets <- meter_offsets %>%
#  rename(
#    meter_id = ?..meter_id
)
#adding a row for when there is no water (nw)
nw_row <- data.frame("nw","10/13/20", 0.0, NA)
names(nw_row) <-  c("meter_id", "date", "offset", "std_dev")
meter_offsets <- rbind(meter_offsets, nw_row)
#averaging the well top to ground (and other variables) per well
well_top_to_ground <- well_tops_to_ground %>%
group_by(well_id) %>%
summarise_at(vars(welltop_to_ground, total_well_length, ground_elevation, welltop_elevation), mean, na.rm = TRUE)
#JN getting error on as.data.table, "could not find function"
#well_top_to_ground <- as.data.table(well_top_to_ground)
#averaging the three measurements for each day per well
well_top_to_water <- biweekly_raw
#well_top_to_water$day <- as.Date(well_top_to_water$timestamp,format="%m/%d/%y %H:%M")
#well_top_to_water$day_only <- as.Date(well_top_to_water$timestamp)
well_top_to_water$day_only <- as.POSIXct(well_top_to_water$timestamp,format="%m/%d/%y %H:%M", tz=Sys.timezone())
#well_top_to_water$time <- chron(well_top_to_water$timestamp)
well_top_to_water <- well_top_to_water %>%
group_by(well_id, day_only, timestamp, meter_id) %>% #keep the meter id. Assumes same meter per site per day
summarise_at(vars(welltop_to_water, water_binary), mean, na.rm = TRUE)
#putting the meter and other data together, for calculating distance from ground to water
groundwater_biweekly <- merge(well_top_to_water, well_top_to_ground, by = "well_id")
groundwater_biweekly <- merge(groundwater_biweekly, meter_offsets, by = "meter_id", how = "left")
groundwater_biweekly <- groundwater_biweekly[
with(groundwater_biweekly, order(well_id, timestamp)),
]
water_ground_col <- c()
test_ground <- groundwater_biweekly
test_ground$ground_to_water <- NA
test_ground[is.na(test_ground$welltop_to_water), "ground_to_water"] <- NA
#when there's no water in the well, we input the (ground to well height - full well height)
cond1 <- (is.na(test_ground$welltop_to_water) & !is.na(test_ground$welltop_to_ground) & !is.na(test_ground$total_well_length) & (test_ground$meter_id == "nw" | (!is.na(test_ground$water_binary) & test_ground$water_binary == 0)))
test_ground$diff <- -(test_ground$total_well_length - test_ground$welltop_to_ground)
test_ground[cond1, "ground_to_water"] <- test_ground[cond1, "diff"]
#if we have all the appropriate measures, then calculate ground to water:
cond2<- (!is.na(test_ground$welltop_to_water) & !is.na(test_ground$welltop_to_ground) & !is.na(test_ground$meter_id))
test_ground$diff <- -(test_ground$welltop_to_water - test_ground$welltop_to_ground + test_ground$offset)
test_ground[cond2, "ground_to_water"] <- test_ground[cond2, "diff"]
groundwater_biweekly <- test_ground[, c(2, 3, 5, 11)]
groundwater_biweekly_full <- test_ground
#write.csv(groundwater_biweekly, "bi-weekly manual/groundwater_biweekly.csv")
write.csv(groundwater_biweekly_full, "bi-weekly manual/groundwater_biweekly_full.csv")
source('~/Documents/GitHub/sagehen_meadows/scripts/groundwater/time_series/Biweekly_groundwater.R')
source('~/Documents/GitHub/sagehen_meadows/scripts/groundwater/time_series/Biweekly_groundwater.R')
#RIVERLAB: Creating Groundwater_BiWeekly.csv
#Author: Julia Nicholson
library(tidyverse) # a universe of tidy data packages
library(patchwork)
library(hash)
setwd("/Users/jnat/Documents/Github/sagehen_meadows/data/field_observations/groundwater/")
biweekly_raw <- read.csv(file = "bi-weekly manual/groundwater_biweekly_RAW.csv")
well_tops_to_ground <- read.csv(file = "well_dimensions.csv")
meter_offsets <- read.csv(file = "well_meter_offsets.csv")
#change meter_id header
#meter_offsets <- meter_offsets %>%
#  rename(
#    meter_id = ?..meter_id
)
#adding a row for when there is no water (nw)
nw_row <- data.frame("nw","10/13/20", 0.0, NA)
names(nw_row) <-  c("meter_id", "date", "offset", "std_dev")
meter_offsets <- rbind(meter_offsets, nw_row)
#averaging the well top to ground (and other variables) per well
well_top_to_ground <- well_tops_to_ground %>%
group_by(well_id) %>%
summarise_at(vars(welltop_to_ground, total_well_length, ground_elevation, welltop_elevation), mean, na.rm = TRUE)
#JN getting error on as.data.table, "could not find function"
#well_top_to_ground <- as.data.table(well_top_to_ground)
#averaging the three measurements for each day per well
well_top_to_water <- biweekly_raw
#well_top_to_water$day <- as.Date(well_top_to_water$timestamp,format="%m/%d/%y %H:%M")
#well_top_to_water$day_only <- as.Date(well_top_to_water$timestamp)
well_top_to_water$timestamp <- as.POSIXct(well_top_to_water$timestamp,format="%m/%d/%y %H:%M", tz=Sys.timezone())
#well_top_to_water$time <- chron(well_top_to_water$timestamp)
well_top_to_water <- well_top_to_water %>%
group_by(well_id, day_only, timestamp, meter_id) %>% #keep the meter id. Assumes same meter per site per day
summarise_at(vars(welltop_to_water, water_binary), mean, na.rm = TRUE)
#putting the meter and other data together, for calculating distance from ground to water
groundwater_biweekly <- merge(well_top_to_water, well_top_to_ground, by = "well_id")
groundwater_biweekly <- merge(groundwater_biweekly, meter_offsets, by = "meter_id", how = "left")
groundwater_biweekly <- groundwater_biweekly[
with(groundwater_biweekly, order(well_id, timestamp)),
]
water_ground_col <- c()
test_ground <- groundwater_biweekly
test_ground$ground_to_water <- NA
test_ground[is.na(test_ground$welltop_to_water), "ground_to_water"] <- NA
#when there's no water in the well, we input the (ground to well height - full well height)
cond1 <- (is.na(test_ground$welltop_to_water) & !is.na(test_ground$welltop_to_ground) & !is.na(test_ground$total_well_length) & (test_ground$meter_id == "nw" | (!is.na(test_ground$water_binary) & test_ground$water_binary == 0)))
test_ground$diff <- -(test_ground$total_well_length - test_ground$welltop_to_ground)
test_ground[cond1, "ground_to_water"] <- test_ground[cond1, "diff"]
#if we have all the appropriate measures, then calculate ground to water:
cond2<- (!is.na(test_ground$welltop_to_water) & !is.na(test_ground$welltop_to_ground) & !is.na(test_ground$meter_id))
test_ground$diff <- -(test_ground$welltop_to_water - test_ground$welltop_to_ground + test_ground$offset)
test_ground[cond2, "ground_to_water"] <- test_ground[cond2, "diff"]
rename(test_ground,date = offset_date)
groundwater_biweekly <- test_ground[, c(2, 3, 5, 11)]
groundwater_biweekly_full <- test_ground
#write.csv(groundwater_biweekly, "bi-weekly manual/groundwater_biweekly.csv")
write.csv(groundwater_biweekly_full, "bi-weekly manual/groundwater_biweekly_full.csv")
source('~/Documents/GitHub/sagehen_meadows/scripts/groundwater/time_series/Biweekly_groundwater.R')
#RIVERLAB: Creating Groundwater_BiWeekly.csv
#Author: Julia Nicholson
library(tidyverse) # a universe of tidy data packages
library(patchwork)
library(hash)
setwd("/Users/jnat/Documents/Github/sagehen_meadows/data/field_observations/groundwater/")
biweekly_raw <- read.csv(file = "bi-weekly manual/groundwater_biweekly_RAW.csv")
well_tops_to_ground <- read.csv(file = "well_dimensions.csv")
meter_offsets <- read.csv(file = "well_meter_offsets.csv")
#change meter_id header
#meter_offsets <- meter_offsets %>%
#  rename(
#    meter_id = ?..meter_id
)
#adding a row for when there is no water (nw)
nw_row <- data.frame("nw","10/13/20", 0.0, NA)
names(nw_row) <-  c("meter_id", "date", "offset", "std_dev")
meter_offsets <- rbind(meter_offsets, nw_row)
#averaging the well top to ground (and other variables) per well
well_top_to_ground <- well_tops_to_ground %>%
group_by(well_id) %>%
summarise_at(vars(welltop_to_ground, total_well_length, ground_elevation, welltop_elevation), mean, na.rm = TRUE)
#JN getting error on as.data.table, "could not find function"
#well_top_to_ground <- as.data.table(well_top_to_ground)
#averaging the three measurements for each day per well
well_top_to_water <- biweekly_raw
#well_top_to_water$day <- as.Date(well_top_to_water$timestamp,format="%m/%d/%y %H:%M")
#well_top_to_water$day_only <- as.Date(well_top_to_water$timestamp)
well_top_to_water$timestamp <- as.POSIXct(well_top_to_water$timestamp,format="%m/%d/%y %H:%M", tz=Sys.timezone())
#well_top_to_water$time <- chron(well_top_to_water$timestamp)
well_top_to_water <- well_top_to_water %>%
group_by(well_id, day_only, timestamp, meter_id) %>% #keep the meter id. Assumes same meter per site per day
summarise_at(vars(welltop_to_water, water_binary), mean, na.rm = TRUE)
#putting the meter and other data together, for calculating distance from ground to water
groundwater_biweekly <- merge(well_top_to_water, well_top_to_ground, by = "well_id")
groundwater_biweekly <- merge(groundwater_biweekly, meter_offsets, by = "meter_id", how = "left")
groundwater_biweekly <- groundwater_biweekly[
with(groundwater_biweekly, order(well_id, timestamp)),
]
water_ground_col <- c()
test_ground <- groundwater_biweekly
test_ground$ground_to_water <- NA
test_ground[is.na(test_ground$welltop_to_water), "ground_to_water"] <- NA
#when there's no water in the well, we input the (ground to well height - full well height)
cond1 <- (is.na(test_ground$welltop_to_water) & !is.na(test_ground$welltop_to_ground) & !is.na(test_ground$total_well_length) & (test_ground$meter_id == "nw" | (!is.na(test_ground$water_binary) & test_ground$water_binary == 0)))
test_ground$diff <- -(test_ground$total_well_length - test_ground$welltop_to_ground)
test_ground[cond1, "ground_to_water"] <- test_ground[cond1, "diff"]
#if we have all the appropriate measures, then calculate ground to water:
cond2<- (!is.na(test_ground$welltop_to_water) & !is.na(test_ground$welltop_to_ground) & !is.na(test_ground$meter_id))
test_ground$diff <- -(test_ground$welltop_to_water - test_ground$welltop_to_ground + test_ground$offset)
test_ground[cond2, "ground_to_water"] <- test_ground[cond2, "diff"]
rename(test_ground,offset_date=date)
groundwater_biweekly <- test_ground[, c(2, 3, 5, 11)]
groundwater_biweekly_full <- test_ground
#write.csv(groundwater_biweekly, "bi-weekly manual/groundwater_biweekly.csv")
write.csv(groundwater_biweekly_full, "bi-weekly manual/groundwater_biweekly_full.csv")
source('~/Documents/GitHub/sagehen_meadows/scripts/groundwater/time_series/Biweekly_groundwater.R')
source('~/Documents/GitHub/sagehen_meadows/scripts/groundwater/time_series/Biweekly_groundwater.R')
source('~/Documents/GitHub/sagehen_meadows/scripts/groundwater/time_series/Biweekly_groundwater.R')
#RIVERLAB: Creating Groundwater_BiWeekly.csv
#Author: Julia Nicholson
library(tidyverse) # a universe of tidy data packages
library(patchwork)
library(hash)
setwd("/Users/jnat/Documents/Github/sagehen_meadows/data/field_observations/groundwater/")
biweekly_raw <- read.csv(file = "bi-weekly manual/groundwater_biweekly_RAW.csv")
well_tops_to_ground <- read.csv(file = "well_dimensions.csv")
meter_offsets <- read.csv(file = "well_meter_offsets.csv")
#change meter_id header
#meter_offsets <- meter_offsets %>%
#  rename(
#    meter_id = ?..meter_id
#  )
#adding a row for when there is no water (nw)
nw_row <- data.frame("nw","10/13/20", 0.0, NA)
names(nw_row) <-  c("meter_id", "date", "offset", "std_dev")
meter_offsets <- rbind(meter_offsets, nw_row)
#averaging the well top to ground (and other variables) per well
well_top_to_ground <- well_tops_to_ground %>%
group_by(well_id) %>%
summarise_at(vars(welltop_to_ground, total_well_length, ground_elevation, welltop_elevation), mean, na.rm = TRUE)
#JN getting error on as.data.table, "could not find function"
#well_top_to_ground <- as.data.table(well_top_to_ground)
#averaging the three measurements for each day per well
well_top_to_water <- biweekly_raw
#well_top_to_water$day <- as.Date(well_top_to_water$timestamp,format="%m/%d/%y %H:%M")
#well_top_to_water$day_only <- as.Date(well_top_to_water$timestamp)
well_top_to_water$timestamp <- as.POSIXct(well_top_to_water$timestamp,format="%m/%d/%y %H:%M", tz=Sys.timezone())
#well_top_to_water$time <- chron(well_top_to_water$timestamp)
well_top_to_water <- well_top_to_water %>%
group_by(well_id, timestamp, meter_id) %>% #keep the meter id. Assumes same meter per site per day
summarise_at(vars(welltop_to_water, water_binary), mean, na.rm = TRUE)
#putting the meter and other data together, for calculating distance from ground to water
groundwater_biweekly <- merge(well_top_to_water, well_top_to_ground, by = "well_id")
groundwater_biweekly <- merge(groundwater_biweekly, meter_offsets, by = "meter_id", how = "left")
groundwater_biweekly <- groundwater_biweekly[
with(groundwater_biweekly, order(well_id, timestamp)),
]
water_ground_col <- c()
test_ground <- groundwater_biweekly
test_ground$ground_to_water <- NA
test_ground[is.na(test_ground$welltop_to_water), "ground_to_water"] <- NA
#when there's no water in the well, we input the (ground to well height - full well height)
cond1 <- (is.na(test_ground$welltop_to_water) & !is.na(test_ground$welltop_to_ground) & !is.na(test_ground$total_well_length) & (test_ground$meter_id == "nw" | (!is.na(test_ground$water_binary) & test_ground$water_binary == 0)))
test_ground$diff <- -(test_ground$total_well_length - test_ground$welltop_to_ground)
test_ground[cond1, "ground_to_water"] <- test_ground[cond1, "diff"]
#if we have all the appropriate measures, then calculate ground to water:
cond2<- (!is.na(test_ground$welltop_to_water) & !is.na(test_ground$welltop_to_ground) & !is.na(test_ground$meter_id))
test_ground$diff <- -(test_ground$welltop_to_water - test_ground$welltop_to_ground + test_ground$offset)
test_ground[cond2, "ground_to_water"] <- test_ground[cond2, "diff"]
rename(test_ground,offset_date = date)
groundwater_biweekly <- test_ground[, c(2, 3, 5, 11)]
groundwater_biweekly_full <- test_ground
#write.csv(groundwater_biweekly, "bi-weekly manual/groundwater_biweekly.csv")
write.csv(groundwater_biweekly_full, "bi-weekly manual/groundwater_biweekly_full.csv")
#RIVERLAB: Creating Groundwater_BiWeekly.csv
#Author: Julia Nicholson
library(tidyverse) # a universe of tidy data packages
library(patchwork)
library(hash)
setwd("/Users/jnat/Documents/Github/sagehen_meadows/data/field_observations/groundwater/")
biweekly_raw <- read.csv(file = "bi-weekly manual/groundwater_biweekly_RAW.csv")
well_tops_to_ground <- read.csv(file = "well_dimensions.csv")
meter_offsets <- read.csv(file = "well_meter_offsets.csv")
#change meter_id header
#meter_offsets <- meter_offsets %>%
#  rename(
#    meter_id = ?..meter_id
#  )
#adding a row for when there is no water (nw)
nw_row <- data.frame("nw","10/13/20", 0.0, NA)
names(nw_row) <-  c("meter_id", "date", "offset", "std_dev")
meter_offsets <- rbind(meter_offsets, nw_row)
#averaging the well top to ground (and other variables) per well
well_top_to_ground <- well_tops_to_ground %>%
group_by(well_id) %>%
summarise_at(vars(welltop_to_ground, total_well_length, ground_elevation, welltop_elevation), mean, na.rm = TRUE)
#JN getting error on as.data.table, "could not find function"
#well_top_to_ground <- as.data.table(well_top_to_ground)
#averaging the three measurements for each day per well
well_top_to_water <- biweekly_raw
#well_top_to_water$day <- as.Date(well_top_to_water$timestamp,format="%m/%d/%y %H:%M")
#well_top_to_water$day_only <- as.Date(well_top_to_water$timestamp)
well_top_to_water$timestamp <- as.POSIXct(well_top_to_water$timestamp,format="%m/%d/%y %H:%M", tz=Sys.timezone())
#well_top_to_water$time <- chron(well_top_to_water$timestamp)
well_top_to_water <- well_top_to_water %>%
group_by(well_id, timestamp, meter_id) %>% #keep the meter id. Assumes same meter per site per day
summarise_at(vars(welltop_to_water, water_binary), mean, na.rm = TRUE)
#putting the meter and other data together, for calculating distance from ground to water
groundwater_biweekly <- merge(well_top_to_water, well_top_to_ground, by = "well_id")
groundwater_biweekly <- merge(groundwater_biweekly, meter_offsets, by = "meter_id", how = "left")
groundwater_biweekly <- groundwater_biweekly[
with(groundwater_biweekly, order(well_id, timestamp)),
]
water_ground_col <- c()
test_ground <- groundwater_biweekly
test_ground$ground_to_water <- NA
test_ground[is.na(test_ground$welltop_to_water), "ground_to_water"] <- NA
#when there's no water in the well, we input the (ground to well height - full well height)
cond1 <- (is.na(test_ground$welltop_to_water) & !is.na(test_ground$welltop_to_ground) & !is.na(test_ground$total_well_length) & (test_ground$meter_id == "nw" | (!is.na(test_ground$water_binary) & test_ground$water_binary == 0)))
test_ground$diff <- -(test_ground$total_well_length - test_ground$welltop_to_ground)
test_ground[cond1, "ground_to_water"] <- test_ground[cond1, "diff"]
#if we have all the appropriate measures, then calculate ground to water:
cond2<- (!is.na(test_ground$welltop_to_water) & !is.na(test_ground$welltop_to_ground) & !is.na(test_ground$meter_id))
test_ground$diff <- -(test_ground$welltop_to_water - test_ground$welltop_to_ground + test_ground$offset)
test_ground[cond2, "ground_to_water"] <- test_ground[cond2, "diff"]
test_ground <- rename(test_ground,offset_date = date)
groundwater_biweekly <- test_ground[, c(2, 3, 5, 11)]
groundwater_biweekly_full <- test_ground
#write.csv(groundwater_biweekly, "bi-weekly manual/groundwater_biweekly.csv")
write.csv(groundwater_biweekly_full, "bi-weekly manual/groundwater_biweekly_full.csv")
#RIVERLAB: Creating Groundwater_BiWeekly.csv
#Author: Julia Nicholson
library(tidyverse) # a universe of tidy data packages
library(patchwork)
library(hash)
setwd("/Users/jnat/Documents/Github/sagehen_meadows/data/field_observations/groundwater/")
biweekly_raw <- read.csv(file = "bi-weekly manual/groundwater_biweekly_RAW.csv")
well_tops_to_ground <- read.csv(file = "well_dimensions.csv")
meter_offsets <- read.csv(file = "well_meter_offsets.csv")
#change meter_id header
#meter_offsets <- meter_offsets %>%
#  rename(
#    meter_id = ?..meter_id
#  )
#adding a row for when there is no water (nw)
nw_row <- data.frame("nw","10/13/20", 0.0, NA)
names(nw_row) <-  c("meter_id", "date", "offset", "std_dev")
meter_offsets <- rbind(meter_offsets, nw_row)
#rename date columnn to distinguish from other dates and timestamps
meter_offsets <- rename(meter_offsets,offset_date = date)
#averaging the well top to ground (and other variables) per well
well_top_to_ground <- well_tops_to_ground %>%
group_by(well_id) %>%
summarise_at(vars(welltop_to_ground, total_well_length, ground_elevation, welltop_elevation), mean, na.rm = TRUE)
#JN getting error on as.data.table, "could not find function"
#well_top_to_ground <- as.data.table(well_top_to_ground)
#averaging the three measurements for each day per well
well_top_to_water <- biweekly_raw
#ensure the timestamp is included with date in output data (i.e. don't want to lose this info; so we can align with sub-daily logger data)
well_top_to_water$timestamp <- as.POSIXct(well_top_to_water$timestamp,format="%m/%d/%y %H:%M", tz=Sys.timezone())
#consider including a day_only variable for grouping observations (later in code, below line 70)
#well_top_to_water$day_only <- as.Date(well_top_to_water$timestamp)
well_top_to_water <- well_top_to_water %>%
group_by(well_id, timestamp, meter_id) %>% #keep the meter id. Assumes same meter per site per day
summarise_at(vars(welltop_to_water, water_binary), mean, na.rm = TRUE)
#putting the meter and other data together, for calculating distance from ground to water
groundwater_biweekly <- merge(well_top_to_water, well_top_to_ground, by = "well_id")
groundwater_biweekly <- merge(groundwater_biweekly, meter_offsets, by = "meter_id", how = "left")
groundwater_biweekly <- groundwater_biweekly[
with(groundwater_biweekly, order(well_id, timestamp)),
]
water_ground_col <- c()
test_ground <- groundwater_biweekly
test_ground$ground_to_water <- NA
test_ground[is.na(test_ground$welltop_to_water), "ground_to_water"] <- NA
#when there's no water in the well, we input the (ground to well height - full well height)
cond1 <- (is.na(test_ground$welltop_to_water) & !is.na(test_ground$welltop_to_ground) & !is.na(test_ground$total_well_length) & (test_ground$meter_id == "nw" | (!is.na(test_ground$water_binary) & test_ground$water_binary == 0)))
test_ground$diff <- -(test_ground$total_well_length - test_ground$welltop_to_ground)
test_ground[cond1, "ground_to_water"] <- test_ground[cond1, "diff"]
#if we have all the appropriate measures, then calculate ground to water:
cond2<- (!is.na(test_ground$welltop_to_water) & !is.na(test_ground$welltop_to_ground) & !is.na(test_ground$meter_id))
test_ground$diff <- -(test_ground$welltop_to_water - test_ground$welltop_to_ground + test_ground$offset)
test_ground[cond2, "ground_to_water"] <- test_ground[cond2, "diff"]
#save the full merged data set of manual bi-weekly readings, averaged per well per timestamp
groundwater_biweekly_full <- test_ground
write.csv(groundwater_biweekly_full, "bi-weekly manual/groundwater_biweekly_full.csv")
#option to save a simpler subset of data; but doesn't seem wise to have duplicates, just use the _full output
#groundwater_biweekly <- test_ground[, c(2, 3, 5, 11)]
#write.csv(groundwater_biweekly, "bi-weekly manual/groundwater_biweekly.csv")
